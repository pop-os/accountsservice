/*
 * Generated by gdbus-codegen 2.51.5. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __ACCOUNTS_GENERATED_H__
#define __ACCOUNTS_GENERATED_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.Accounts */

#define ACCOUNTS_TYPE_ACCOUNTS (accounts_accounts_get_type ())
#define ACCOUNTS_ACCOUNTS(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), ACCOUNTS_TYPE_ACCOUNTS, AccountsAccounts))
#define ACCOUNTS_IS_ACCOUNTS(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), ACCOUNTS_TYPE_ACCOUNTS))
#define ACCOUNTS_ACCOUNTS_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), ACCOUNTS_TYPE_ACCOUNTS, AccountsAccountsIface))

struct _AccountsAccounts;
typedef struct _AccountsAccounts AccountsAccounts;
typedef struct _AccountsAccountsIface AccountsAccountsIface;

struct _AccountsAccountsIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_cache_user) (
    AccountsAccounts *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name);

  gboolean (*handle_create_user) (
    AccountsAccounts *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name,
    const gchar *arg_fullname,
    gint arg_accountType);

  gboolean (*handle_delete_user) (
    AccountsAccounts *object,
    GDBusMethodInvocation *invocation,
    gint64 arg_id,
    gboolean arg_removeFiles);

  gboolean (*handle_find_user_by_id) (
    AccountsAccounts *object,
    GDBusMethodInvocation *invocation,
    gint64 arg_id);

  gboolean (*handle_find_user_by_name) (
    AccountsAccounts *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name);

  gboolean (*handle_list_cached_users) (
    AccountsAccounts *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_uncache_user) (
    AccountsAccounts *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name);

  const gchar * (*get_daemon_version) (AccountsAccounts *object);

  void (*user_added) (
    AccountsAccounts *object,
    const gchar *arg_user);

  void (*user_deleted) (
    AccountsAccounts *object,
    const gchar *arg_user);

};

GType accounts_accounts_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *accounts_accounts_interface_info (void);
guint accounts_accounts_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void accounts_accounts_complete_list_cached_users (
    AccountsAccounts *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *users);

void accounts_accounts_complete_find_user_by_id (
    AccountsAccounts *object,
    GDBusMethodInvocation *invocation,
    const gchar *user);

void accounts_accounts_complete_find_user_by_name (
    AccountsAccounts *object,
    GDBusMethodInvocation *invocation,
    const gchar *user);

void accounts_accounts_complete_create_user (
    AccountsAccounts *object,
    GDBusMethodInvocation *invocation,
    const gchar *user);

void accounts_accounts_complete_cache_user (
    AccountsAccounts *object,
    GDBusMethodInvocation *invocation,
    const gchar *user);

void accounts_accounts_complete_uncache_user (
    AccountsAccounts *object,
    GDBusMethodInvocation *invocation);

void accounts_accounts_complete_delete_user (
    AccountsAccounts *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void accounts_accounts_emit_user_added (
    AccountsAccounts *object,
    const gchar *arg_user);

void accounts_accounts_emit_user_deleted (
    AccountsAccounts *object,
    const gchar *arg_user);



/* D-Bus method calls: */
void accounts_accounts_call_list_cached_users (
    AccountsAccounts *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean accounts_accounts_call_list_cached_users_finish (
    AccountsAccounts *proxy,
    gchar ***out_users,
    GAsyncResult *res,
    GError **error);

gboolean accounts_accounts_call_list_cached_users_sync (
    AccountsAccounts *proxy,
    gchar ***out_users,
    GCancellable *cancellable,
    GError **error);

void accounts_accounts_call_find_user_by_id (
    AccountsAccounts *proxy,
    gint64 arg_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean accounts_accounts_call_find_user_by_id_finish (
    AccountsAccounts *proxy,
    gchar **out_user,
    GAsyncResult *res,
    GError **error);

gboolean accounts_accounts_call_find_user_by_id_sync (
    AccountsAccounts *proxy,
    gint64 arg_id,
    gchar **out_user,
    GCancellable *cancellable,
    GError **error);

void accounts_accounts_call_find_user_by_name (
    AccountsAccounts *proxy,
    const gchar *arg_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean accounts_accounts_call_find_user_by_name_finish (
    AccountsAccounts *proxy,
    gchar **out_user,
    GAsyncResult *res,
    GError **error);

gboolean accounts_accounts_call_find_user_by_name_sync (
    AccountsAccounts *proxy,
    const gchar *arg_name,
    gchar **out_user,
    GCancellable *cancellable,
    GError **error);

void accounts_accounts_call_create_user (
    AccountsAccounts *proxy,
    const gchar *arg_name,
    const gchar *arg_fullname,
    gint arg_accountType,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean accounts_accounts_call_create_user_finish (
    AccountsAccounts *proxy,
    gchar **out_user,
    GAsyncResult *res,
    GError **error);

gboolean accounts_accounts_call_create_user_sync (
    AccountsAccounts *proxy,
    const gchar *arg_name,
    const gchar *arg_fullname,
    gint arg_accountType,
    gchar **out_user,
    GCancellable *cancellable,
    GError **error);

void accounts_accounts_call_cache_user (
    AccountsAccounts *proxy,
    const gchar *arg_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean accounts_accounts_call_cache_user_finish (
    AccountsAccounts *proxy,
    gchar **out_user,
    GAsyncResult *res,
    GError **error);

gboolean accounts_accounts_call_cache_user_sync (
    AccountsAccounts *proxy,
    const gchar *arg_name,
    gchar **out_user,
    GCancellable *cancellable,
    GError **error);

void accounts_accounts_call_uncache_user (
    AccountsAccounts *proxy,
    const gchar *arg_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean accounts_accounts_call_uncache_user_finish (
    AccountsAccounts *proxy,
    GAsyncResult *res,
    GError **error);

gboolean accounts_accounts_call_uncache_user_sync (
    AccountsAccounts *proxy,
    const gchar *arg_name,
    GCancellable *cancellable,
    GError **error);

void accounts_accounts_call_delete_user (
    AccountsAccounts *proxy,
    gint64 arg_id,
    gboolean arg_removeFiles,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean accounts_accounts_call_delete_user_finish (
    AccountsAccounts *proxy,
    GAsyncResult *res,
    GError **error);

gboolean accounts_accounts_call_delete_user_sync (
    AccountsAccounts *proxy,
    gint64 arg_id,
    gboolean arg_removeFiles,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *accounts_accounts_get_daemon_version (AccountsAccounts *object);
gchar *accounts_accounts_dup_daemon_version (AccountsAccounts *object);
void accounts_accounts_set_daemon_version (AccountsAccounts *object, const gchar *value);


/* ---- */

#define ACCOUNTS_TYPE_ACCOUNTS_PROXY (accounts_accounts_proxy_get_type ())
#define ACCOUNTS_ACCOUNTS_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), ACCOUNTS_TYPE_ACCOUNTS_PROXY, AccountsAccountsProxy))
#define ACCOUNTS_ACCOUNTS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), ACCOUNTS_TYPE_ACCOUNTS_PROXY, AccountsAccountsProxyClass))
#define ACCOUNTS_ACCOUNTS_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), ACCOUNTS_TYPE_ACCOUNTS_PROXY, AccountsAccountsProxyClass))
#define ACCOUNTS_IS_ACCOUNTS_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), ACCOUNTS_TYPE_ACCOUNTS_PROXY))
#define ACCOUNTS_IS_ACCOUNTS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), ACCOUNTS_TYPE_ACCOUNTS_PROXY))

typedef struct _AccountsAccountsProxy AccountsAccountsProxy;
typedef struct _AccountsAccountsProxyClass AccountsAccountsProxyClass;
typedef struct _AccountsAccountsProxyPrivate AccountsAccountsProxyPrivate;

struct _AccountsAccountsProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  AccountsAccountsProxyPrivate *priv;
};

struct _AccountsAccountsProxyClass
{
  GDBusProxyClass parent_class;
};

GType accounts_accounts_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (AccountsAccountsProxy, g_object_unref)
#endif

void accounts_accounts_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
AccountsAccounts *accounts_accounts_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
AccountsAccounts *accounts_accounts_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void accounts_accounts_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
AccountsAccounts *accounts_accounts_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
AccountsAccounts *accounts_accounts_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define ACCOUNTS_TYPE_ACCOUNTS_SKELETON (accounts_accounts_skeleton_get_type ())
#define ACCOUNTS_ACCOUNTS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), ACCOUNTS_TYPE_ACCOUNTS_SKELETON, AccountsAccountsSkeleton))
#define ACCOUNTS_ACCOUNTS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), ACCOUNTS_TYPE_ACCOUNTS_SKELETON, AccountsAccountsSkeletonClass))
#define ACCOUNTS_ACCOUNTS_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), ACCOUNTS_TYPE_ACCOUNTS_SKELETON, AccountsAccountsSkeletonClass))
#define ACCOUNTS_IS_ACCOUNTS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), ACCOUNTS_TYPE_ACCOUNTS_SKELETON))
#define ACCOUNTS_IS_ACCOUNTS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), ACCOUNTS_TYPE_ACCOUNTS_SKELETON))

typedef struct _AccountsAccountsSkeleton AccountsAccountsSkeleton;
typedef struct _AccountsAccountsSkeletonClass AccountsAccountsSkeletonClass;
typedef struct _AccountsAccountsSkeletonPrivate AccountsAccountsSkeletonPrivate;

struct _AccountsAccountsSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  AccountsAccountsSkeletonPrivate *priv;
};

struct _AccountsAccountsSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType accounts_accounts_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (AccountsAccountsSkeleton, g_object_unref)
#endif

AccountsAccounts *accounts_accounts_skeleton_new (void);


G_END_DECLS

#endif /* __ACCOUNTS_GENERATED_H__ */
